apply plugin: "eclipse"
apply plugin: "application"

ext.JVM_PROJECTS = [
	project(":core"),
	project(":dsl"),
	project(":ui")
]

def final JAVA_PLUGIN_PROJECTS = [project(":core")]

def final C_PROJECTS = [project(":native")]
def final ASPECTJ_PROJECTS = [project(":core")]
def final GROOVY_PROJECTS = [
	project(":dsl"),
	project(":ui")
]

subprojects.each{ it.apply plugin: "eclipse" }

// Plugins
JAVA_PLUGIN_PROJECTS.each{ it.apply plugin: "java" }

C_PROJECTS.each{ it.apply plugin: "cpp-lib" }

ASPECTJ_PROJECTS.each{
	it.configurations{
		ajc
		aspectPath
		inpath
	}
}

GROOVY_PROJECTS.each{ it.apply plugin: "groovy" }

// Property Evaluation
subprojects{
	beforeEvaluate{ proj ->
		proj.ext.usesJunit = false
		proj.ext.usesMockito = false
		proj.ext.usesOval = false
	}

	afterEvaluate{ proj ->
		if(proj.usesJunit || proj.usesMockito || proj.usesOval){
			proj.repositories{ mavenCentral() }
		}

		if(ASPECTJ_PROJECTS.contains(proj)){
			proj.dependencies{
				ajc "org.aspectj:aspectjrt:1.7.2", "org.aspectj:aspectjtools:1.7.2"
				compile configurations.ajc
			}
			proj.eclipse{
				classpath{
					plusConfigurations += proj.configurations.ajc
				}
				project{
					natures += [
						"org.eclipse.ajdt.ui.ajnature"
					]

					buildCommand "org.eclipse.ajdt.core.ajbuilder"
				}
			}
		}

		if(C_PROJECTS.contains(proj)){
			proj.eclipse{
				project{
					natures += [
						"org.eclipse.cdt.core.cnature",
						"org.eclipse.cdt.managedbuilder.core.managedBuildNature",
						"org.eclipse.cdt.managedbuilder.core.ScannerConfigNature"
					]

					buildCommand "org.eclipse.cdt.managedbuilder.core.genmakebuilder"
					buildCommand "org.eclipse.cdt.managedbuilder.core.ScannerConfigBuilder"
				}
			}
		}

		if(GROOVY_PROJECTS.contains(proj)){
			proj.dependencies{ compile "org.codehaus.groovy:groovy-all:2.1.2"}
			proj.eclipse{
				project{
					natures +=[
						"org.eclipse.jdt.groovy.core.groovyNature"
					]
				}
			}
		}

		if(proj.usesJunit){
			proj.dependencies{ testCompile "junit:junit:4.11" }
		}

		if(proj.usesMockito){
			proj.dependencies{ testCompile "org.mockito:mockito-all:1.9.5" }
		}

		if(JAVA_PLUGIN_PROJECTS.contains(proj)){
			proj.tasks.test.forkEvery = 0
			proj.convention.plugins.java.sourceCompatibility = 1.7
			proj.convention.plugins.java.targetCompatibility = 1.7
			proj.eclipse{
				project{
					natures "org.eclipse.jdt.core.javanature", "net.sf.eclipsecs.core.CheckstyleNature"

					buildCommand "net.sf.eclipsecs.core.CheckstyleBuilder"
					buildCommand "org.eclipse.jdt.core.javabuilder"
				}
			}
		}

		if(proj.usesOval){
			proj.dependencies{ compile "net.sf.oval:oval:1.81" }
		}
	}
}

allprojects{proj->
	afterEvaluate{
		proj.eclipse.project.natures "org.springsource.ide.eclipse.gradle.core.nature"
	}
}

task buildJVMProjects{ dependsOn JVM_PROJECTS*.tasks.build }

task buildAll{ dependsOn subprojects*.tasks.assemble }

task cleanAll{ dependsOn subprojects*.tasks.clean }

task cleanAllEclipse{ dependsOn subprojects*.tasks.cleanEclipse }

task allEclipse{ dependsOn subprojects*.tasks.eclipse }

def getAllArtifacts(){
	def allArtifacts = []
	def jvmProjectArtifacts = JVM_PROJECTS*.configurations.runtime.artifacts.files.files.sum()
	def nonJvmProjectArtifacts = file(project(":native").buildDir.path + "/binaries/").listFiles()
	def projectDependencies = JVM_PROJECTS*.configurations.runtime.resolvedConfiguration.resolvedArtifacts.file
	def uniqueProjectDependencies = projectDependencies.sum().unique()
	allArtifacts = uniqueProjectDependencies - jvmProjectArtifacts
	jvmProjectArtifacts.each{ allArtifacts << it }
	nonJvmProjectArtifacts.each{ allArtifacts << it }

	allArtifacts
}

mainClassName = "at.fabianachammer.pdusend.pdusend"

startScripts{
	doFirst{	
		getAllArtifacts().each{
			classpath += files(it)
		}
	}
	
	doLast {
		unixScript.text = unixScript.text.replace('DEFAULT_JVM_OPTS=""', 'DEFAULT_JVM_OPTS="-Djava.library.path=../lib/"')
		unixScript.text = unixScript.text.replace('exec "$JAVACMD"', 'exec sudo "$JAVACMD"')
		windowsScript.text = windowsScript.text.replace('DEFAULT_JVM_OPTS=', 'DEFAULT_JVM_OPTS="-Djava.library.path=../lib/"')
	}
}

distZip {
	doFirst{
		getAllArtifacts().each{
			applicationDistribution.from(it.parent){
				into "/lib"
			}
		}
		
	}
}


