apply plugin: 'eclipse'
apply plugin: 'application'

def final C_PROJECTS = [project(':native')]
def final GROOVY_PROJECTS = [
	project(':common'),
	project(':api'),
	project(':internal'),
	project(':dsl'),
	project(':ui')
]

ext.JVM_PROJECTS = GROOVY_PROJECTS

subprojects.each{ it.apply plugin: 'eclipse' }

// Plugins
C_PROJECTS.each{ it.apply plugin: 'cpp-lib' }
GROOVY_PROJECTS.each{ it.apply plugin: 'groovy' }

// Property Evaluation
subprojects{
	beforeEvaluate{ proj ->
		proj.ext.usesJunit = false
		proj.ext.usesMockito = false
		proj.ext.usesOval = false
	}

	afterEvaluate{ proj ->
		proj.repositories{ mavenCentral() }

		if(C_PROJECTS.contains(proj)){
			proj.eclipse{
				project{
					natures += [
						'org.eclipse.cdt.core.cnature',
						'org.eclipse.cdt.managedbuilder.core.managedBuildNature',
						'org.eclipse.cdt.managedbuilder.core.ScannerConfigNature'
					]

					buildCommand 'org.eclipse.cdt.managedbuilder.core.genmakebuilder'
					buildCommand 'org.eclipse.cdt.managedbuilder.core.ScannerConfigBuilder'
				}
			}
		}

		if(GROOVY_PROJECTS.contains(proj)){
			proj.dependencies{
				groovy 'org.codehaus.groovy:groovy-all:2.1.2'
				compile 'org.codehaus.groovy:groovy-all:2.1.2'
			}
			proj.eclipse{
				project{
					natures +=[
						'org.eclipse.jdt.groovy.core.groovyNature'
					]
				}
			}
		}

		if(proj.usesJunit){
			proj.dependencies{ testCompile 'junit:junit:4.11' }
		}

		if(proj.usesMockito){
			proj.dependencies{ testCompile 'org.mockito:mockito-all:1.9.5' }
		}

		if(proj.usesOval){
			proj.dependencies{ compile 'net.sf.oval:oval:1.81' }
		}
	}
}

allprojects{proj->
	afterEvaluate{
		proj.eclipse.project.natures 'org.springsource.ide.eclipse.gradle.core.nature'
	}
}

task buildJVMProjects{ dependsOn JVM_PROJECTS*.tasks.build }

task assembleAll{ dependsOn subprojects*.tasks.assemble }

task cleanAll{ dependsOn subprojects*.tasks.clean }

task cleanAllEclipse{ dependsOn subprojects*.tasks.cleanEclipse }

task allEclipse{ dependsOn subprojects*.tasks.eclipse }

def getAllArtifacts(){
	def allArtifacts = []
	def jvmProjectArtifacts = JVM_PROJECTS*.configurations.runtime.artifacts.files.files.sum()
	def nonJvmProjectArtifacts = file(project(':native').buildDir.path + '/binaries/').listFiles()
	def projectDependencies = JVM_PROJECTS*.configurations.runtime.resolvedConfiguration.resolvedArtifacts.file
	def uniqueProjectDependencies = projectDependencies.sum().unique()
	allArtifacts = uniqueProjectDependencies - jvmProjectArtifacts
	jvmProjectArtifacts.each{ allArtifacts << it }
	nonJvmProjectArtifacts.each{ allArtifacts << it }

	return allArtifacts
}


applicationName = 'pdusend'
mainClassName = 'at.fabianachammer.pdusend.pdusend'

startScripts{
	doFirst{
		getAllArtifacts().each{ classpath += files(it) }
	}

	doLast {
		unixScript.text = unixScript.text.replace('DEFAULT_JVM_OPTS=', 'DEFAULT_JVM_OPTS="-Djava.library.path=../lib/"')
		unixScript.text = unixScript.text.replace('exec "$JAVACMD"', 'exec sudo "$JAVACMD"')
		windowsScript.text = windowsScript.text.replace('DEFAULT_JVM_OPTS=', 'DEFAULT_JVM_OPTS="-Djava.library.path=../lib/"')
	}
}

defaultTasks 'installApp'

[distZip, distTar, installApp].each {
	it.doFirst{
		getAllArtifacts().each{
			applicationDistribution.from(it.parent){ into '/lib' }
		}

	}
	
	it.dependsOn(subprojects*.assemble)
}

task wrapper(type: Wrapper){ gradleVersion = '1.5' }
